Final Project Report

Overall, we implemented every feature we planned to include in our game. Below are issues we ran into as we created our game delineated by requirement.

-User-Controlled "racquet"

We chose to use a semi-transparent plane as our racquet. Once we understood how to use OIS, we were able to add controls for each of the paddle's movements, pitches, and rolls. One issue with the paddle is that doing extreme pitches and rolls could force the paddle to disappear until the angle is changed enough for the rendering engine to see it agian. We were able to solve this problem by adding bounds to the rotation.

-Camera Control

The camera follows the paddle and sits inside the box shaped playing field. This follows the expectations we set forth for it and allows the user to see the entire playing field.

-Sound effects

We used the SDL library to create a sound wrapper class to handle playing audio. We added sound effects for the ball hitting walls, the paddle hitting the ball, and hitting the correct goal. We also added background music to enhance the game. Sounds can be toggled on and off within the GUI menu.

-Physics engine for physics and collision detection

We added the Bullet physics engine and created a Physics wrapper class to determine how collisions would provoke actions like sound and affect the different game bodies. We also created a KinematicMotionState interface to update kinematic objects in the physics engine. We came accross a bug we were unable to solve with bullet where sometimes the paddle will not collide correctly even though the motionstate is being updated. We used gravity to slow the ball and made the player rely on scoring consistently and the paddle's hitting function to keep playing. 

-Scoring Mechanic

We keep the score using a HUD in the corner. We left the scoring mechanic simple in line with the game's features. The player scores 1 point for everytime they hit the score zone. We did not end up implementing a feature for the score to decrease on the paddle missing a hit attempt.

Additionally, we attempted to add extra credit features for background music, end conditions, and player interfaces. Importing the CEGUI library gave us significant trouble, but we were able to build out the interface once we had it linked and installed.

